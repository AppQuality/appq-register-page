/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/authenticate": {
    /** A request to login with your username and password */
    post: operations["post-authenticate"];
  };
  "/projects": {
    /** Get all projects that you can view. A project is a collection of campaigns linked with your account. */
    get: operations["get-projects"];
  };
  "/customers": {
    /** Get all the customers you have access to */
    get: operations["get-customers"];
    /** Add a new Customer to the platform */
    post: operations["post-customers"];
    parameters: {};
  };
  "/customers/{customer}": {
    /** Get the data for a Customer if you have access to it */
    get: operations["get-customers-customer_id"];
    /** Change the data of a Customer if you have access to it */
    put: operations["put-customers-customer"];
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
      };
    };
  };
  "/customers/{customer}/projects/{project}/campaigns": {
    /** Get all the Campaigns registered in a Project */
    get: operations["get-customer-customer_id-project-project_id-campaigns"];
    /** Create a new Campaign and register it to a Project */
    post: operations["post-customers-customer_id-projects-project_id-campaigns"];
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
        /** A project id */
        project: components["parameters"]["project"];
      };
    };
  };
  "/campaigns": {
    /** Get all the Campaigns you have access to */
    get: operations["get-campaigns"];
    /** Create a new Campaign if you have access to the creation */
    post: operations["post-campaigns"];
  };
  "/campaigns/{campaign}": {
    /** Get the data of a Campaign if you have access to it */
    get: operations["get-campaigns-campaign"];
    /** Edit the data of a Campaign if you have access to it */
    put: operations["put-campaigns-campaign"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
  };
  "/campaigns/{campaign}/tasks": {
    /** Get all UseCases linked to a Campaign */
    get: operations["get-campaigns-campaign-tasks"];
    /** Create a new UseCase and link it to a Campaign */
    post: operations["post-campaigns-campaign-tasks"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
  };
  "/campaigns/{campaign}/tasks/{task}": {
    /** Get the data of a UseCase in a Campaign */
    get: operations["get-campaigns-campaign-tasks-task"];
    /** Edit a UseCase in a Campaign */
    put: operations["put-campaigns-campaign-tasks-task"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        /** A task id */
        task: components["parameters"]["task"];
      };
    };
  };
  "/": {
    /** Get all routes available for this apis */
    get: operations["get-root"];
    parameters: {};
  };
  "/users": {
    /** Get all users you have access to */
    get: operations["get-users"];
    /** Create a new user */
    post: operations["post-users"];
  };
  "/users/me": {
    /** Get your user data */
    get: operations["get-users-me"];
    /** Edit your user data */
    put: operations["put-users-me"];
    patch: operations["patch-users-me"];
  };
  "/users/me/bugs": {
    /** Get all the bugs that you uploaded to AppQuality. */
    get: operations["get-users-me-bugs"];
    parameters: {};
  };
  "/users/me/experience": {
    /** Get all the experience points earned in AppQuality. */
    get: operations["get-users-me-experience"];
  };
  "/users/me/fiscal": {
    get: operations["get-users-me-fiscal"];
    post: operations["post-users-me-fiscal"];
  };
  "/users/me/campaigns": {
    /**
     * get available, and selected campaigns for a single user.
     * filterBy[accepted] = 1 retrieve accepted campaign only, otherwise retrieve available campaign.
     * filterBy[completed] = 1 get completed campaigns only (end date in the past)
     * filterBy[completed] = 0 get not completed campaigns only (end date today or in the future)
     * filterBy[statusID] = 1 get open campaigns
     * filterBy[statusID] = 2 get closed campaigns
     */
    get: operations["get-users-me-campaigns"];
  };
  "/popups": {
    get: operations["get-popups"];
    post: operations["post-popups"];
    parameters: {};
  };
  "/popups/{popup}": {
    get: operations["get-popups-popup"];
    patch: operations["patch-popups-popup"];
    parameters: {
      path: {
        popup: number;
      };
    };
  };
  "/users/me/popups": {
    get: operations["get-users-me-popups"];
  };
  "/users/me/popups/{popup}": {
    get: operations["get-users-me-popups-popup"];
    parameters: {
      path: {
        popup: number;
      };
    };
  };
  "/users/me/devices": {
    get: operations["get-users-me-devices"];
    /** Add a new device to your user */
    post: operations["post-users-me-devices"];
  };
  "/users/me/devices/{deviceId}": {
    get: operations["get-users-me-devices-deviceId"];
    delete: operations["delete-users-me-devices-deviceId"];
    patch: operations["patch-users-me-devices-deviceId"];
    parameters: {
      path: {
        deviceId: number;
      };
    };
  };
}

export interface components {
  schemas: {
    Project: {
      name?: string;
    };
    Campaign: components["schemas"]["CampaignOptional"] &
      components["schemas"]["CampaignRequired"];
    BugSeverity: {
      id?: number;
      name?: string;
    };
    BugType: {
      id?: number;
    };
    Replicability: {
      id?: string;
    };
    Task: components["schemas"]["TaskOptional"] &
      components["schemas"]["TaskRequired"];
    Customer: components["schemas"]["User"] & {
      customer_name?: string;
    };
    CampaignField: {
      id?: number;
    };
    CampaignOptional: {
      name?: string;
      customer_title?: string;
      internal_id?: string;
      dates?: {
        start?: string;
        end?: string;
        close?: string;
      };
      status?: boolean;
      language?: string;
      public?: boolean;
      hasBugParade?: boolean;
      devices?: {
        id?: string;
      }[];
      minNumberOfMedia?: number;
      titleRule?: boolean;
      allowed?: {
        severities?: components["schemas"]["BugSeverity"][];
        bug_types?: components["schemas"]["BugType"][];
        replicabilities?: components["schemas"]["Replicability"][];
      };
      projectManager?: components["schemas"]["User"];
      customerCanViewReviewing?: boolean;
      additionalFields?: components["schemas"]["CampaignField"][];
      tokens?: number;
      csm_effort?: number;
      ux_effort?: number;
      preview_link?: components["schemas"]["TranslatablePage"];
      manual_link?: components["schemas"]["TranslatablePage"];
      /** If bugform is deactivated is a boolean else contains URLs to bugforms for each languages */
      bugform_link?: boolean | components["schemas"]["TranslatablePage"];
      /** True if you applied on this Campaign */
      applied?: boolean;
    };
    CampaignRequired: {
      name: string;
      internal_id: string;
      dates: {
        start: string;
        end: string;
        close: string;
      };
      devices: {
        id: string;
      }[];
      projectManager: components["schemas"]["User"];
      campaign_type: components["schemas"]["CampaignType"];
    };
    TaskOptional: {
      name?: string;
      content?: string;
      campaign_id?: number;
      group?: number;
      allow_media?: boolean;
    };
    TaskRequired: {
      name: string;
      content: string;
      campaign_id: number;
    };
    CampaignType: string | number;
    User: {
      username?: string;
      name?: string;
      surname?: string;
      email?: string;
      image?: string;
      id?: number;
      wp_user_id?: number;
      role?: string;
      is_verified?: boolean;
    };
    Bug: {
      severity?: components["schemas"]["BugSeverity"];
      status?: components["schemas"]["BugStatus"];
      campaign?: components["schemas"]["CampaignOptional"] & {
        id?: number;
      };
      title?: string;
    };
    BugStatus: {
      id?: number;
      name?: string;
      description?: string;
    };
    Popup: {
      profiles?:
        | number[]
        | (
            | "all"
            | "italian"
            | "non-italian"
            | "logged-in-year"
            | "not-logged-in-year"
          );
      once?: boolean;
      content?: string;
      title?: string;
    };
    TranslatablePage: {
      en?: string;
      it?: string;
    };
    UserDevice: {
      type: string;
      id: number;
      device:
        | {
            manufacturer: string;
            model: string;
          }
        | {
            pc_type: string;
          };
      operative_system: {
        id: number;
        platform: string;
        version: string;
      };
    };
  };
  responses: {
    /** A user */
    UserData: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    /** Authentication data. The token can be used to authenticate the protected requests */
    Authentication: {
      content: {
        "application/json": {
          id?: number;
          firstName?: string;
          lastName?: string;
          token?: string;
          username?: string;
        };
      };
    };
    /** A list of Campaigns with the Campaign id */
    ListOfCampaigns: {
      content: {
        "application/json": (components["schemas"]["Campaign"] & {
          id: number;
        })[];
      };
    };
    /** A single Campaigns with the Campaign id and Project data */
    SingleCampaign: {
      content: {
        "application/json": components["schemas"]["Campaign"] & {
          id: number;
        } & {
          project?: components["schemas"]["Project"] & {
            id?: number;
          };
        };
      };
    };
    /** An error due to the resource not existing */
    NotFound: {
      content: {
        "application/json": {
          element: string;
          id: number;
          message: string;
        };
      };
    };
    /** An error due to missing required parameters */
    MissingParameters: {
      content: {
        "application/json": {
          message: string;
        };
      };
    };
    /** An error due to insufficient authorization to access the resource */
    NotAuthorized: {
      content: {
        "application/json": {
          message?: string;
        };
      };
    };
  };
  parameters: {
    /** A campaign id */
    campaign: string;
    /** A task id */
    task: string;
    /** A customer id */
    customer: string;
    /** A project id */
    project: string;
    /** Max items to retrieve */
    limit: number;
    /** Items to skip for pagination */
    start: number;
    /** Key-value Array for item filtering */
    filterBy: { [key: string]: unknown };
    /** How to order values (ASC, DESC) */
    order: "ASC" | "DESC";
    /** How to localize values */
    locale: "en" | "it";
    /** A comma separated list of fields which will be searched */
    searchBy: string;
    /** The value to search for */
    search: string;
  };
}

export interface operations {
  /** A request to login with your username and password */
  "post-authenticate": {
    parameters: {};
    responses: {
      200: components["responses"]["Authentication"];
      /** Unauthorized */
      401: {
        content: {
          "application/json": string;
        };
      };
    };
    /** A JSON containing username and password */
    requestBody: {
      content: {
        "application/json": {
          username: string;
          password: string;
        };
      };
    };
  };
  /** Get all projects that you can view. A project is a collection of campaigns linked with your account. */
  "get-projects": {
    parameters: {};
    responses: {
      /** A list of projects */
      200: {
        content: {
          "application/json": (components["schemas"]["Project"] & {
            campaigns?: (components["schemas"]["Campaign"] & {
              id?: number;
            })[];
          })[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all the customers you have access to */
  "get-customers": {
    parameters: {};
    responses: {
      /** An array of Customer objects */
      200: {
        content: {
          "application/json": (components["schemas"]["Customer"] & {
            id?: number;
          })[];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
  };
  /** Add a new Customer to the platform */
  "post-customers": {
    parameters: {};
    responses: {
      /** Created */
      201: unknown;
      400: components["responses"]["MissingParameters"];
      403: components["responses"]["NotAuthorized"];
    };
    /** The customer you want to create */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer"];
      };
    };
  };
  /** Get the data for a Customer if you have access to it */
  "get-customers-customer_id": {
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
      };
    };
    responses: {
      /** The Customer data you requested */
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Change the data of a Customer if you have access to it */
  "put-customers-customer": {
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      400: components["responses"]["MissingParameters"];
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The Customer data to edit */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer"];
      };
    };
  };
  /** Get all the Campaigns registered in a Project */
  "get-customer-customer_id-project-project_id-campaigns": {
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
        /** A project id */
        project: components["parameters"]["project"];
      };
    };
    responses: {
      200: components["responses"]["ListOfCampaigns"];
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Create a new Campaign and register it to a Project */
  "post-customers-customer_id-projects-project_id-campaigns": {
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
        /** A project id */
        project: components["parameters"]["project"];
      };
    };
    responses: {
      201: components["responses"]["SingleCampaign"];
      400: components["responses"]["MissingParameters"];
      403: components["responses"]["NotAuthorized"];
    };
    /** The Campaign data to set on the newly created Campaign */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Campaign"];
      };
    };
  };
  /** Get all the Campaigns you have access to */
  "get-campaigns": {
    responses: {
      200: components["responses"]["ListOfCampaigns"];
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Create a new Campaign if you have access to the creation */
  "post-campaigns": {
    responses: {
      201: components["responses"]["SingleCampaign"];
      400: components["responses"]["MissingParameters"];
      403: components["responses"]["NotAuthorized"];
    };
    /** The Campaign data to set on the newly created Campaign, including the id of the Project to link the Campaign to */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Campaign"] & {
          project_id?: number;
        };
      };
    };
  };
  /** Get the data of a Campaign if you have access to it */
  "get-campaigns-campaign": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      200: components["responses"]["SingleCampaign"];
      403: components["responses"]["NotAuthorized"];
      /** Not Found */
      404: unknown;
    };
  };
  /** Edit the data of a Campaign if you have access to it */
  "put-campaigns-campaign": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      200: components["responses"]["SingleCampaign"];
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The Campaign data to edit */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CampaignOptional"];
      };
    };
  };
  /** Get all UseCases linked to a Campaign */
  "get-campaigns-campaign-tasks": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** A list of UseCase linked with the Campaign */
      200: {
        content: {
          "application/json": (components["schemas"]["Task"] & {
            id?: number;
          })[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Create a new UseCase and link it to a Campaign */
  "post-campaigns-campaign-tasks": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** Created */
      201: unknown;
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The data of the new UseCase to link to the Campaign */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskOptional"];
      };
    };
  };
  /** Get the data of a UseCase in a Campaign */
  "get-campaigns-campaign-tasks-task": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        /** A task id */
        task: components["parameters"]["task"];
      };
    };
    responses: {
      /** A UseCase linked with the Campaign */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Edit a UseCase in a Campaign */
  "put-campaigns-campaign-tasks-task": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        /** A task id */
        task: components["parameters"]["task"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The data to edit in the UseCase linked to the Campaign */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskOptional"];
      };
    };
  };
  /** Get all routes available for this apis */
  "get-root": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  /** Get all users you have access to */
  "get-users": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
    };
  };
  /** Create a new user */
  "post-users": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          surname: string;
          email: string;
          password: string;
          country: string;
          birthDate: string;
          /** A referral code (formatted as TESTER_ID-CAMPAIGN_ID) */
          referral?: string;
        };
      };
    };
  };
  /** Get your user data */
  "get-users-me": {
    parameters: {
      query: {
        /** Comma separeted string of specific fields requested */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** Edit your user data */
  "put-users-me": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          surname?: string;
          password?: string;
          email?: string;
        };
      };
    };
  };
  "patch-users-me": {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: unknown;
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          onboarding_completed?: boolean;
        };
      };
    };
  };
  /** Get all the bugs that you uploaded to AppQuality. */
  "get-users-me-bugs": {
    parameters: {
      query: {
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
        /** The field for item order */
        orderBy?: "title" | "campaign" | "status" | "id" | "severity";
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results: ({
              id: number;
            } & components["schemas"]["Bug"])[];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all the experience points earned in AppQuality. */
  "get-users-me-experience": {
    parameters: {
      query: {
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** A comma separated list of fields which will be searched */
        searchBy?: components["parameters"]["searchBy"];
        /** The value to search for */
        search?: components["parameters"]["search"];
        /** The field for item order */
        orderBy?: "amount" | "campaign" | "date" | "note" | "activity" | "id";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results: {
              id: number;
              activity: {
                id: number;
              };
              campaign: {
                id: number;
                title?: string;
              };
              date: string;
              amount: number;
              note?: string;
            }[];
            limit?: number;
            size?: number;
            start?: number;
            /** The total number of experience entries */
            total?: number;
            /** The total sum of experience */
            sum: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "get-users-me-fiscal": {
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          fiscalResidence?: string;
          fiscalCategory?: string;
          birthPlace?: string;
          fiscalAddress?: string;
          fiscalId?: string;
        };
      };
    };
  };
  "post-users-me-fiscal": {
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          fiscalResidence: string;
          fiscalCategory: string;
          birthPlace: string;
          fiscalAddress: string;
          fiscalId: string;
        };
      };
    };
  };
  /**
   * get available, and selected campaigns for a single user.
   * filterBy[accepted] = 1 retrieve accepted campaign only, otherwise retrieve available campaign.
   * filterBy[completed] = 1 get completed campaigns only (end date in the past)
   * filterBy[completed] = 0 get not completed campaigns only (end date today or in the future)
   * filterBy[statusID] = 1 get open campaigns
   * filterBy[statusID] = 2 get closed campaigns
   */
  "get-users-me-campaigns": {
    parameters: {
      query: {
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
        /** How to localize values */
        locale?: components["parameters"]["locale"];
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** The field for item order */
        orderBy?: "name" | "start_date" | "end_date" | "close_date";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results?: ({
              id: number;
            } & components["schemas"]["Campaign"])[];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  "get-popups": {
    parameters: {
      query: {
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": ({
            id?: number;
          } & components["schemas"]["Popup"])[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "post-popups": {
    parameters: {};
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Popup"];
      };
    };
  };
  "get-popups-popup": {
    parameters: {
      path: {
        popup: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
  };
  "patch-popups-popup": {
    parameters: {
      path: {
        popup: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Popup"];
      };
    };
  };
  "get-users-me-popups": {
    parameters: {
      query: {
        /** Show all popup history, expired popups included */
        showExpired?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
            title?: string;
            content?: string;
            once?: boolean;
          }[];
        };
      };
    };
  };
  "get-users-me-popups-popup": {
    parameters: {
      path: {
        popup: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
    };
  };
  "get-users-me-devices": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": ({
            id?: number;
          } & components["schemas"]["UserDevice"])[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Add a new device to your user */
  "post-users-me-devices": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          device:
            | number
            | (
                | "Notebook"
                | "Desktop"
                | "Ultrabook"
                | "Gaming PC"
                | "Tablet PC / Hybrid"
              );
          operative_system: number;
        };
      };
    };
  };
  "get-users-me-devices-deviceId": {
    parameters: {
      path: {
        deviceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "delete-users-me-devices-deviceId": {
    parameters: {
      path: {
        deviceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "patch-users-me-devices-deviceId": {
    parameters: {
      path: {
        deviceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      /** Not Modified */
      304: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          operating_system?: number;
        };
      };
    };
  };
}

export interface external {}
